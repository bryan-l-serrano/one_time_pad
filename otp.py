import random

def binaryXOR(binString, binString2):
     # this function takes two binary strings 
     # of equal length
     # and performs an XOR operation on each 
     # index of the strings

     output_string = ''
     if len(binString) == len(binString2):
          for x in range(0,len(binString)):

               if binString[x] == '0' and binString2[x]== '0':
                    output_string += '0'
               elif binString[x] == '0' and binString2[x] == '1':
                    output_string += '1'
               elif binString[x] == '1' and binString2[x]== '0':
                    output_string += '1'
               elif binString[x] == '1' and binString2[x] == '1':
                    output_string += '0'
     return output_string 


def encryptOTP(text_file):

     # this function encrypts a message using a 
     # one time pad and outputs the encrypted
     # message and a key to decrypt the message

     ascii_list = []
     binary_list = []
     key = []
     total_length = 0
     truekey = 0

     file_object = open(text_file, 'r')
     text =  str(file_object.read())
     file_object.close()

     for words in text:
          for letters in words:
               ascii_list.append(ord(letters))

     for integers in ascii_list:
         binary_list.append(str('{0:08b}'.format(integers)))

     message = ''.join(binary_list)

     for x in range( 0, len(binary_list)):
          key.append('{0:08b}'.format(random.randint(0,255)))
     truekey = ''.join(key)
     key_file = open("key.txt", "w")
     key_file.write(truekey)
     key_file.close()

     encrypted_message = binaryXOR(message,truekey)
     
     message_file = open("emessage.txt", "w")
     message_file.write(encrypted_message)
     message_file.close()


def decrypt(message_text, key_text):

     # this function decrypts the encrypted
     # message using the encrypted text and
     # the key that was generated by the encryptOTP
     # function 
     
     dec_message = ''

     key_object = open(key_text, 'r')
     key = key_object.read()
     key = str(key)

     message_object = open(message_text, 'r')
     message = str(message_object.read())
     message_object.close
 
     binary_message = binaryXOR(message, key)

     for x in range(0, len(binary_message)/8 ):
          binary_number = binary_message[ (8 * x ) : (8*(x+1))]
          dec_message += chr(int(binary_number,2))

     output = open("dec_message.txt", "w")
     output.write(dec_message)
     output.close()